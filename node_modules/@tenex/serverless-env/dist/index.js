"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const chalk_1 = require("chalk");
const yml = require("js-yaml");
const deepmerge = require("deepmerge");
const replace_in_string_1 = require("./replace-in-string");
const fse = require("fs-extra");
const shell = require("shelljs");
let dir;
const args = process.argv;
let path = args.indexOf("--path") > 0 && args[args.indexOf("--path") + 1];
const pwd = shell.exec("pwd").stdout;
const functionString = (path, args, name, mockPath) => `const func = require("${path}");
  const yml = require("js-yaml");
  const fs = require("fs");
   let logArr = [];
   const origConsoleLog = console.log;
   console.log = (...args) => {
    origConsoleLog.apply(console, args);
    logArr.push(args);
   };
   const getAll = () => {
     return logArr.join('\\n');
   };
   const logAll = () => {
    origConsoleLog.call(console, getAll());
   };
    
    exports.default = async function(){
      logArr = [];
      const args = yml.safeLoad(fs.readFileSync("${mockPath}")).mock.args;
      const response = await func.default.bind({id:"${name}"})(${args
    .map((v, i) => `args[${i}]`)
    .join(",")})
    //logAll();
        return {
            statusCode: 200,
            body:  getAll() + "\\n\\noutput:" + response
        }
    }
        `;
(async function () {
    const args = process.argv;
    path = args.indexOf("--path") > 0 && args[args.indexOf("--path") + 1];
    console.log("path>>", path);
    if (!path) {
        throw new Error(chalk_1.default.red("No valid path. Make sure to set the --path varible in the command"));
    }
    const pathToFile = "tx.yml";
    const string = fs.readFileSync(pathToFile, "utf-8");
    const ymlObj = yml.safeLoad(string);
    const mock = ymlObj.mock;
    if (!mock)
        throw new Error(chalk_1.default.red("No valid mock data. Make sure to set a mock object in the tx.yml file.\n If no such exist. Testing is not avalible"));
    const name = ymlObj.mock.name.toLowerCase();
    const mockArgs = ymlObj.mock.args;
    if (!mockArgs)
        throw new Error(chalk_1.default.red("No valid arguments in the mock data. Please enter a name of the mock util to be able to use it as mock"));
    const service = ymlObj.mock.service || "mock-service";
    const stage = ymlObj.mock.stage || "dev";
    const region = ymlObj.mock.region || "eu-west-1";
    const runtime = ymlObj.mock.region || "nodejs10.x";
    if (!name)
        throw new Error(chalk_1.default.red("No valid name in the mock data. Please enter a name of the mock util to be able to use it as mock"));
    const types = yml.safeLoad(fs.readFileSync("types/serverless.yml", "utf-8"));
    const defaultValues = {
        service: "${service}",
        plugins: ["serverless-offline-lambda", "serverless-offline"],
        provider: {
            name: "aws",
            runtime: "${runtime}",
            region: "${region}"
        },
        functions: {
            testFunction: {
                handler: "index.default",
                events: [
                    {
                        http: {
                            path: `/`,
                            method: "get",
                            cors: true
                        }
                    }
                ]
            }
        }
    };
    const serverless = yml.safeDump(JSON.parse(replace_in_string_1.default({ name, service, stage, region, runtime }, JSON.stringify(deepmerge.all([defaultValues, types])))));
    const _path = shell.exec("pwd").stdout;
    dir = ".mock";
    if (!fs.existsSync(".mock"))
        fse.mkdirSync(".mock");
    fs.writeFileSync(dir + "/serverless.yml", serverless);
    fs.writeFileSync(dir + "/index.js", functionString(_path.replace("\n", "") + "/" + path, mockArgs, name, _path.replace("\n", "") + "/" + pathToFile));
    if (process.argv.indexOf("--remove") > 0) {
        shell.exec(`cd ${pwd.replace("\n", "/") + dir} && serverless remove `);
        fse.removeSync(dir);
        console.log("Thanks for using tx");
        process.exit();
    }
    console.log("Creating stack");
    shell.exec(`cd ${pwd.replace("\n", "/") + dir} && serverless deploy && sls offline  `);
    console.log("Building complete");
})();
